{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"SandboxJS","text":"<p>A JS Sandboxing Utility utilizing iframes (and your browser's iframe sandbox) and postMessage.</p>"},{"location":"#a-quick-note","title":"A quick note","text":"<p>Any data inside of the sandbox iframe is not trustable as any site can write to it. Do not store data there, it is not a trusted environment.</p> <p>Also, don't run this on any domains, or subdomains of any domain that you have sensitive information on - the best plan of action is to just use the dedicated domain sandboxjs.foo outside of testing.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#npm","title":"NPM","text":"<p><code>pnpm i sboxjs</code></p>"},{"location":"installation/#cdn","title":"CDN","text":"CJSMJS <p>Load <code>https://sandboxjs.foo/lib/lib.cjs</code> in a script tag - e.g. <code>&lt;script src=\"https://sandboxjs.foo/lib/lib.cjs\"&gt;&lt;/script&gt;</code></p> <p>Load <code>https://sandboxjs.foo/lib/lib.mjs</code> from an import - e.g. <code>import SandboxJS from 'https://sandboxjs.foo/lib/lib.mjs';</code></p>"},{"location":"mirrors/","title":"Mirrors","text":"<p>This repository has several mirrors.</p>"},{"location":"mirrors/#source","title":"Source","text":"<p>All repositories below mirror this source repo on Codeberg.</p> <p>View source repo</p>"},{"location":"mirrors/#mirrors_1","title":"Mirrors","text":"<p>Remember: All of these can be stale, and they mirror the above. Only use these if codeberg is down, or you otherwise must rely on 3rd-party infrastructure - ie if your ISP, Network Administrator or Educational Facility blocks Codeberg.</p> <ul> <li>Notabug</li> <li>GitLab</li> <li>GitHub</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>documentation is incomplete ok</p>"},{"location":"usage/#creating-a-sandbox","title":"Creating a sandbox","text":"<pre><code>&lt;script type=\"module\"&gt;\nimport SbJS from 'https://sandboxjs.foo/lib/lib.mjs'; // lib is also exposed as window.SandboxJS - use https://sandboxjs.foo/lib/lib.cjs alongside the window object if you're on commonjs.\n(async()=&gt;{\nconst sbx = await (new SandboxJS()\n.init()); // resolves when the iframe is loaded and ready to go - this should be called before any other methods. You are not required to chain this, but you can.\nconst returnValue = await sbx.run('alert(window.location.href);\\nreturn `Hi from ${window.location.href}`;') // alerts 'https://sandboxjs.foo/' and returns 'Hi from https://sandboxjs.foo/'\n})();\n&lt;/script&gt;\n</code></pre>"},{"location":"usage/#setting-the-sandbox-attribute-on-the-iframe","title":"Setting the sandbox= attribute on the iframe","text":"<pre><code>const sbx = new SandboxJS();\nsbx.sandbox.add('allow-modals'); // adds the allow-modals sandbox attribute to the iframe\nsbx.sandbox.remove('allow-modals'); // removes the allow-modals sandbox attribute from the iframe\n</code></pre>"},{"location":"usage/#resetting-a-sandbox","title":"Resetting a Sandbox","text":"<p>Sandboxes can have their state messed up - ie via reload()s, or via navigation. In addition, if you modify params, or the ADD to sandbox options, they can't retroactively be applied to the sandbox. In scenarios like these, you need to reset the sandbox.</p> <p>To reset a sandbox, you need to kill() it, and re-init() it.</p> <p>An example of doing this for navigation is this: <pre><code>// Create a sandbox\nconst sbx = await (new SandboxJS()\n.init());\n\n// Mess up the sandbox\nsbx.run(`window.location.href = 'https://example.com/'`);\n\n// Reset the sandbox\nsbx.kill();\nawait sbx.init();\n\n// The sandbox is now reset\nawait sbx.run(`return window.location.href;`); // returns 'https://sandboxjs.foo/', not 'https://example.com/'\n</code></pre></p> <p>Another example of changing sandbox options post-load is this: <pre><code>// Create a sandbox\nconst sbx = new SandboxJS();\nsbx.sandbox.remove('allow-modals'); // you can call .remove() on any of the sandbox options, and it'll remove them from the sandbox\nawait sbx.init();\n\n// Run something that's disallowed in the current policy\nawait sbx.run(`alert('Hai!')`); // doesn't alert\n\n// Re-allow it\nsbx.sandbox.add('allow-modals');\n\n// Run something that's now allowed in the current policy\nawait sbx.run(`alert('Hai 2!')`); // still doesn't alert\n\n// Reset the sandbox\nsbx.kill();\nawait sbx.init();\n\n// The sandbox is now reset\nawait sbx.run(`alert('Hai 3!')`); // alerts 'Hai 3!' successfully\n</code></pre></p> <p>It's worth noting that, as the nested iframe's sandbox parameters are queried via a URL query parameter, if you remove a sandbox attribute post-init(), you can re-add it via sbx.sandbox.add() and it'll work again. This is, however, discouraged.</p>"}]}